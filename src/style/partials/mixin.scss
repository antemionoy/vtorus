@mixin inputPlaceholder() {
    $selector: '';
    $prefixes: ( moz: "::-moz", webkit: "::-webkit", ie: ":-ms");
    @each $prop,
    $value in $prefixes {
        @if $prop !="moz" {
            $selector: #{$value}-input-placeholder;
        }
        @else {
            $selector: #{$value}-placeholder;
        }
        @if & {
            &#{$selector} {
                @content;
            }
        }
        @else {
            #{$selector} {
                @content;
            }
        }
    }
    &::placeholder {
        @content;
    }
}

// @mixin reset-list {
//   margin: 0;
//   padding: 0;
//   list-style: none;
// }

// @mixin horizontal-list {
//   @include reset-list;

//   li {
//     margin-bottom: 10px;
//   }
// }



/* Миксин для обрезки текста с многоточием */

@mixin text-ellipsis {
    overflow: hidden;
    text-overflow: ellipsis;
    white-space: nowrap;
}


/*
  !!!HOW USE!!!
  (e.g)
font-size: rem(24px); // Simple
  padding: rem(5px 10px); // Multiple values
  border-bottom: rem(1px solid black); // Multiple mixed values
  box-shadow: rem(0 0 2px #ccc, inset 0 0 5px #eee); // Comma-separated values
  text-shadow: rem(1px 1px) #eee, rem(-1px) 0 #eee; // Alternate use
*/
$rem-px-only: false !default;
$htmlFontSize: 16px;

@function rem-separator($list, $separator: false) {
  @if $separator=="comma"or $separator=="space" {
    @return append($list, null, $separator);
  }

  @if function-exists("list-separator")==true {
    @return list-separator($list);
  }

  // list-separator polyfill by Hugo Giraudel (https://sass-compatibility.github.io/#list_separator_function)
  $test-list: ();

  @each $item in $list {
    $test-list: append($test-list, $item, space);
  }

  @return if($test-list==$list, space, comma);
}

@mixin rem-baseline($zoom: 100%) {
  font-size: $zoom / 16px * $htmlFontSize;
}

@function rem-convert($to, $values...) {
  $result: ();
  $separator: rem-separator($values);

  @each $value in $values {
    @if type-of($value)=="number"and unit($value)=="rem"and $to=="px" {
      $result: append($result, $value / 1rem * $htmlFontSize, $separator);
    }

    @else if type-of($value)=="number"and unit($value)=="px"and $to=="rem"

      {
      $result: append($result, $value / $htmlFontSize * 1rem, $separator);
    }

    @else if type-of($value)=="list" {
      $value-separator: rem-separator($value);
      $value: rem-convert($to, $value...);
      $value: rem-separator($value, $value-separator);
      $result: append($result, $value, $separator);
    }

    @else {
      $result: append($result, $value, $separator);
    }
  }

  @return if(length($result)==1, nth($result, 1), $result);
}

@function rem($values...) {
  @if $rem-px-only {
    @return rem-convert(px, $values...);
  }

  @else {
    @return rem-convert(rem, $values...);
  }
}

@mixin rem($properties, $values...) {
  @if type-of($properties)=="map" {
    @each $property in map-keys($properties) {
      @include rem($property, map-get($properties, $property));
    }
  }

  @else {
    @each $property in $properties {
      @if $rem-px-only {
        #{$property}: rem-convert(px, $values...);
      }
    }
  }
}